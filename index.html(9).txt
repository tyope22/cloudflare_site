<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="google-site-verification" content="bvy3sL8jC_pD1-peOD3jq-TDWdSQR6eCxxGn76RedhY" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preload" as="image" href="assets/optimized_rose.jpg" fetchpriority="high">
    
    <title>Shayari Collection | Live Clock</title> 
    
    <!-- Favicon Links for browser tab icon (using a placeholder image and an emoji fallback) -->
    <link rel="icon" href="https://placehold.co/32x32/ff0000/ffffff.ico?text=S" type="image/x-icon">
    <link rel="icon" type="image/png" href="https://placehold.co/192x192/ff0000/ffffff.png?text=S">
    <link rel="apple-touch-icon" href="https://placehold.co/180x180/ff0000/ffffff.png?text=S">

    
    <!-- ⬇️ THIS IS THE CORRECT SPOT FOR OG TAGS ⬇️ -->
    <meta name="description" content="Explore a stunning collection of 300 smoothly shuffling Shayari (poems/couplets), elegantly displayed alongside a circular rose image and an interactive digital clock.">
    <meta property="og:title" content="Shayari Collection: Your Daily Dose of Poetry 🌹">
    <meta property="og:description" content="The main feature! Dive into collection of unique Shayari, presented in a sleek, continuously shuffling block. Also features a touch-zoom clock and a beautiful rose graphic.">
    <meta property="og:image" content="https://cloudflare-site-4wm.pages.dev/path/to/your/rose_image.jpg"> 
    
    <!-- Twitter Card Tags (Optional, but good for Twitter link previews) -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content=" Shayari Collection | Live Clock & Rose Display">
    <meta name="twitter:description" content="The main feature! Dive into collection of unique Shayari, presented in a sleek, continuously shuffling block. Also features a touch-zoom clock and a beautiful rose graphic.">
    <meta name="twitter:image" content="https://cloudflare-site-4wm.pages.dev/path/to/your/rose_image.jpg">
    <meta name="twitter:site" content="@yourhandle">
    <meta name="twitter:creator" content="@creatorhandle">
 
    <!-- Essential for responsiveness -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <link rel="preload" href="styles.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript><link rel="stylesheet" href="styles.css"></noscript>  
    
<!-- CRITICAL INLINE STYLES FOR ANIMATION START -->
    <style>
        /* 1. Keyframes are needed instantly */
        @keyframes pop-in {
            0% { opacity: 0; transform: scale(0.95); }
            100% { opacity: 1; transform: scale(1); }
        }
        /* 2. The initial state (opacity: 0) and the animation property itself */
        .animate-header {
            animation: pop-in 1s ease-out 0.5s forwards;
            opacity: 0; /* CRITICAL: Starts the element hidden */
        }
          /* --- Dynamic Zoom Class (Triggered by JS) --- */

.clock-zoom {

box-shadow: 0 0 70px rgba(97, 218, 251, 1);

/* CRITICAL FIX: Use a CSS Variable for dynamic scaling */ 
    transform: translate(-50%, -50%) scale(var(--scale-factor)); /* Ensure placement and visibility */ 
    position: fixed; top: 50%; left: 50%; z-index: 9999; /* Keep the font size huge and responsive */ 
    font-size: 10vw; transition: all 0.3s ease-in-out; /* FIX: This forces the color change */ 
    background-color: #000033 !important; /* Dark Navy Blue */ 
    color: #FFFFFF !important; /* Bright White Text */ 

}

/* --- CRITICAL CSS BLOCK (TO BE INLINED IN <head> OF index.html) --- */
body {
    background-color: #111827; /* Dark background */
    color: #E3F2FD; /* Light text for the body */
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    display: flex; 
    flex-direction: column;
    align-items: center;
    min-height: 100vh;
    margin: 0;
}

h1 {
    color: #06B6D4;
    margin-bottom: 20px;
}

        /* --- Live Clock Styling --- */
        #live-clock {
            padding: 1rem 2rem;
            margin-left: auto;
            margin-right: auto;
            margin-bottom: 2rem;
            border-radius: 0.75rem;
            font-size: 1.8rem;
            font-weight: 700;
            font-family: monospace;
            display: table;
            background-color: #000000;
            text-align: center;
            color: #06B6D4;
            box-shadow: 0 0 15px rgba(97, 218, 251, 0.7);
            cursor: pointer;
            transition: all 0.3s ease-in-out;
}
        

.image-circle {
    border-radius: 9999px;
    overflow: hidden;
    width: 16rem;
    height: 16rem;
    margin-left: auto;
    margin-right: auto;
    border: 3px solid rgba(6, 182, 212, 1);
}

.image-circle img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

#shayari-container {
    width: 90vw;
    max-width: 100%;
    height: 45vw;
    max-height: 400px;
    margin-left: auto;
    margin-right: auto;
    margin-top: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 2rem;
    border: 3px solid transparent;
    border-radius: 1.5rem;
    transition: all 0.5s ease-in-out;
    background-color: rgba(0, 0, 0, 0.4);
}

#shayari-text {
    /* FIX: Using a high-performance system serif font stack */
    font-family: 'Georgia', 'Times New Roman', serif;
    font-size: clamp(1.2rem, 3vw, 2rem);
    font-style: italic;
    font-weight: 700;
    color: #FFFFFF;
    line-height: 1.5;
    transition: opacity 0.5s ease-in-out;
}

@media (max-width: 600px) {
    #shayari-container {
        padding: 1rem;
    }
    #shayari-text {
        font-size: 1.3rem;
    }
}
/* --- Button Styling --- */
    .about-button {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    border: 1px solid transparent; 
    font-size: 1rem;
    font-weight: 500;
    border-radius: 9999px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    color: white;
    background-color: #047857;
    transition: all 150ms ease-in-out; 
    margin-top: 1.5rem;
    margin-bottom: 2.5rem; /* Separates it nicely from the content below */
    text-decoration: none;
}
    .about-button:hover {
    background-color: #065f46;
    transform: scale(1.05);
}
/* --- END CRITICAL CSS BLOCK --- */

    </style>
    
    <link rel="preload" href="styles.css" as="style" onload="this.onload=null;this.rel='stylesheet'"> 
    <noscript><link rel="stylesheet" href="styles.css"></noscript>

</head>
    
</head>
<body>
    <main>
        <h1 class="animate-header">Heart touching Shayari!</h1>
        <div class="image-circle">
            
            <img 
                src="assets/optimized_rose.jpg" 
                alt="A beautiful rose" 
                onerror="this.onerror=null; this.src='https://placehold.co/400x400/14b8a6/ffffff?text=Image+Placeholder'" 
                />
        </div>
        <a href="about.html" class="about-button">
    Learn More About Me
</a>
   
<!-- The Clock: Now styled purely by custom CSS in the <style> block -->
<div id="live-clock">
    Loading Clock...
</div>

</div>
<!-- Shayari Rotating Display -->
<div id="shayari-container">
    <div id="shayari-text">
        Loading the Book of Verses...
    </div>
</div>

    <!-- Styling the horizontal rule for a clean division -->
 <hr class="divider">
    </main>
<!-- Footer Section: Using simple styled IMG tag and custom CSS classes -->
<footer class="footer-style">
    <!-- 
        Note: This is a placeholder QR code image that you must replace 
        with the URL of your final, beautiful PNG when ready.
    -->
    <img 
        src="https://quickchart.io/qr?text=https://cloudflare-site-4wm.pages.dev&size=150&fill=rgb(230,116,81)&format=png&dark=d30000&light=1f2937&margin=4" 
        alt="QR Code to share the website" 
        class="qr-image"
    />
    
    <p class="footer-text-primary">© 2024 Project Secret Website. All Digital Rights Reserved.</p>
    <p class="footer-text-secondary">Built with passion, HTML, pure CSS, and pure JavaScript.</p>
</footer>

    <script>
        // Function to get the current time and update the display
        function updateClock() {
            // Create a new Date object to get the current date and time
            const now = new Date();
            
            // Format the time as a string (e.g., "15:00:00")
            // toLocaleTimeString is the easiest way to get a clean, local time format
            const timeString = now.toLocaleTimeString('en-US', { 
    hour: 'numeric', 
    minute: '2-digit', 
    second: '2-digit', 
    hour12: true 
});


            // Find the <div> element with the id "live-clock"
            const clockElement = document.getElementById('live-clock');

            // Update the content of that <div>
            clockElement.innerText = timeString;
        }

        // 3. Start the clock immediately when the page loads
        updateClock(); 

        // 4. Set an interval to run the updateClock function every 1000 milliseconds (1 second)
        // This is what makes it a "live" clock
        setInterval(updateClock, 1000);
        
        // --- Stable Hover Zoom Logic ---
const clockElement = document.getElementById('live-clock');
let zoomTimeout;

// Function to handle the start of the zoom
function startZoom() {
    clearTimeout(zoomTimeout); 
    
    zoomTimeout = setTimeout(() => {
        // 1. Get the current width of the clock element
        const clockWidth = clockElement.offsetWidth;
        
        // 2. Get the width of the viewport
        const viewportWidth = window.innerWidth;
        
        // 3. Calculate the required scale factor: (Viewport Width / Clock Width)
        // We use a small buffer (0.95) to ensure it doesn't clip right at the edge
        const scaleFactor = (viewportWidth / clockWidth) * 0.95; 
        
        // 4. Set the CSS variable on the element
        clockElement.style.setProperty('--scale-factor', scaleFactor);

        // 5. Apply the zoom class
        clockElement.classList.add('clock-zoom');
    }, 150); // 150ms delay for stability
}

// Function to handle the end of the zoom
        function endZoom() {
            // Clear the timeout if it hasn't fired yet
            clearTimeout(zoomTimeout);
            
            // 1. Remove the class (removes position, transform, zoom colors)
            clockElement.classList.remove('clock-zoom');
            
            // 2. Clear the dynamically set scale factor
            clockElement.style.removeProperty('--scale-factor');
            
            // We rely on the #live-clock CSS to immediately re-apply default colors and shadows.
        }

// Apply the robust event listeners
        if (clockElement) {
            // Mouse Events: Use hover for continuous zoom (as desired on desktop)
            clockElement.onmouseover = startZoom;
            clockElement.onmouseout = endZoom;
            
            // Touch Events: Use a single tap to toggle zoom on/off (best mobile UX)
            clockElement.ontouchstart = (event) => {
                // Prevent the browser's default context menu or long-press delay
                event.preventDefault(); 
                
                // Toggle the zoom state on tap
                if (clockElement.classList.contains('clock-zoom')) {
                    // If already zoomed, unzoom immediately
                    endZoom(); 
                } else {
                    // If not zoomed, zoom in immediately
                    // Note: We skip the stability timeout here for a snappy mobile tap experience
                    
                    // 1. Calculate the required scale factor
                    const clockWidth = clockElement.offsetWidth;
                    const viewportWidth = window.innerWidth;
                    const scaleFactor = (viewportWidth / clockWidth) * 0.95; 
                    
                    // 2. Set the CSS variable
                    clockElement.style.setProperty('--scale-factor', scaleFactor);
                    
                    // 3. Apply the zoom class
                    clockElement.classList.add('clock-zoom');
                }
            };
        }
// --- End Stable Hover Zoom Logic ---
        
        // --- SHAYARI ROTATION LOGIC (WITH AESTHETICS) ---

let shayariCollection = [];
let currentShayariIndex = 0;
const rotationInterval = 18000; // 18 seconds (18000 milliseconds)

function setShayari(verse, glowColor = '#FF0033') { // Default to red if color isn't provided
    const textElement = document.getElementById('shayari-text');
    if (textElement) {
        // 1. Start fade out and remove glow class
        textElement.style.opacity = 0;
        textElement.classList.remove('fade-in-glow');

        setTimeout(() => {
            // 2. Change text content
            textElement.innerHTML = verse;
            
            // 3. Set the custom glow style dynamically based on the color passed in
            textElement.style.textShadow = `0 0 10px ${glowColor}, 0 0 20px ${glowColor}`;

            // 4. Start fade in
            textElement.style.opacity = 1;

            // 5. Remove glow after a short delay
            setTimeout(() => {
                textElement.style.textShadow = 'none';
            }, 1000);

        }, 500); // Wait 500ms for fade out to complete
    }
}

// Array of beautiful neon/deep colors for the box change
const neonColors = [
    '#FF33CC', // Hot Pink
    '#33FFCC', // Cyan
    '#FFFF33', // Neon Yellow
    '#FF6600', // Neon Orange
    '#9933FF', // Deep Purple
    '#00FF99', // Emerald Green
    '#FF0033'  // Bright Red
];

function setBoxColor(color) {
    const container = document.getElementById('shayari-container');
    if (container) {
        // Set the border and box-shadow to the vibrant color
        container.style.borderColor = color;
        container.style.boxShadow = `0 0 25px ${color}`;

        // Get the RGB values from the hex color
        const hexToRgb = (hex) => {
            const bigint = parseInt(hex.slice(1), 16);
            const r = (bigint >> 16) & 255;
            const g = (bigint >> 8) & 255;
            const b = bigint & 255;
            return { r, g, b };
        };
        const { r, g, b } = hexToRgb(color);

        // Set the background color to a very dark, highly transparent version of the accent color
        container.style.backgroundColor = `rgba(${r}, ${g}, ${b}, 0.1)`; 
    }
}

function rotateShayari() {
    if (shayariCollection.length === 0) return;

    // 1. Pick a random color index from the list
    const randomColorIndex = Math.floor(Math.random() * neonColors.length);
    const newColor = neonColors[randomColorIndex];

    // 2. Apply the new color to the box (This calls the new global function)
    setBoxColor(newColor);

    // 3. Cycle through verses and pass the new color for the text glow
    setShayari(shayariCollection[currentShayariIndex], newColor);
    currentShayariIndex = (currentShayariIndex + 1) % shayariCollection.length;
}
        async function loadShayari() {
            // Standard Fisher-Yates Shuffle Algorithm
            function shuffleArray(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [array[i], array[j]] = [array[j], array[i]];
                }
            }
            
            try {
        const response = await fetch('./shayari.json');
        
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        shayariCollection = await response.json();
        
        if (!Array.isArray(shayariCollection) || shayariCollection.length === 0) {
            throw new Error("Shayari data is empty or malformed.");
        }

        // ✅ NEW LOGIC: Shuffle the collection immediately after loading
        shuffleArray(shayariCollection);
        
    } catch (error) {
        console.warn("Could not load external Shayari. If this is running in the preview, this is expected.");
    } finally {
        if (shayariCollection.length > 0) {
            // Start at the first verse of the now-shuffled array (which is random)
            currentShayariIndex = 0; 
            
            rotateShayari();
            setInterval(rotateShayari, rotationInterval);
        } else {
            setShayari("The Book of Verses is loading...");
        }
    }
}



// Initialize Shayari loading sequence
loadShayari();


    </script>

</body>
</html>
